version: 2.1

# These "CircleCI Orbs" are reusable bits of configuration that can be shared
# across projects.  See https://circleci.com/orbs/ for more information.
orbs:
  secops: apollo/circleci-secops-orb@2.0.7

executors:
  amd_linux_build: &amd_linux_build_executor
    docker:
      - image: cimg/base:stable
    resource_class: xlarge
    environment:
      CARGO_BUILD_JOBS: 4
      RUST_TEST_THREADS: 6
  amd_linux_test: &amd_linux_test_executor
    docker:
      - image: cimg/base:stable
      - image: cimg/redis:7.2.4
      - image: jaegertracing/all-in-one:1.54.0
      - image: openzipkin/zipkin:2.23.2
      - image: ghcr.io/datadog/dd-apm-test-agent/ddapm-test-agent:v1.17.0
    resource_class: xlarge
    environment:
      CARGO_BUILD_JOBS: 4
  macos_build: &macos_build_executor
    macos:
      # See https://circleci.com/docs/xcode-policy along with the support matrix
      # at https://circleci.com/docs/using-macos#supported-xcode-versions.
      # We use the major.minor notation to bring in compatible patches.
      xcode: "14.2.0"
    resource_class: macos.m1.large.gen1
  macos_test: &macos_test_executor
    macos:
      # See https://circleci.com/docs/xcode-policy along with the support matrix
      # at https://circleci.com/docs/using-macos#supported-xcode-versions.
      # We use the major.minor notation to bring in compatible patches.
      #
      # TODO: remove workaround added in https://github.com/apollographql/router/pull/5462
      # once we update to Xcode >= 15.1.0
      # See: https://github.com/apollographql/router/pull/5462
      xcode: "14.2.0"
    resource_class: macos.m1.large.gen1

# We don't use {{ arch }} because on windows it is unstable https://discuss.circleci.com/t/value-of-arch-unstable-on-windows/40079
parameters:
  toolchain_version:
    type: string
    default: '{{ checksum ".circleci/config.yml" }}-v2-{{ checksum "~/.arch" }}-{{ checksum "rust-toolchain.toml" }}-{{ checksum "~/.daily_version" }}'
  xtask_version:
    type: string
    default: '{{ checksum ".circleci/config.yml" }}-{{ checksum "~/.arch" }}-{{ checksum "rust-toolchain.toml" }}-{{ checksum "~/.xtask_version" }}'
  merge_version:
    type: string
    default: '{{ checksum ".circleci/config.yml" }}-{{ checksum "~/.arch" }}-{{ checksum "rust-toolchain.toml" }}-{{ checksum "~/.xtask_version" }}-{{ checksum "~/.merge_version" }}'
  protoc_version:
    type: string
    default: "21.8"
  nightly:
    type: boolean
    default: false
  # quick_nightly will skip testing and only build the release artifacts.
  quick_nightly:
    type: boolean
    default: false

# These are common environment variables that we want to set on on all jobs.
# While these could conceivably be set on the CircleCI project settings'
# as "Secrets", these are not really secrets, and its convenient to keep them in
# code.  Also, most of our secrets are not necessary for _most_ of our jobs, so this enables
# forks of the project to run their own tests on their own CircleCI deployments with no
# additional configuration.
common_job_environment: &common_job_environment
  CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  RUST_BACKTRACE: full
  CARGO_INCREMENTAL: 0
commands:

  setup_environment:
    parameters:
      platform:
        type: executor
    steps:
      - unify_environment:
          platform: << parameters.platform >>
      - create_cache_keys
      - restore_cache:
          keys:
            - "<< pipeline.parameters.toolchain_version >>"
      - install_packages:
          platform: << parameters.platform >>
      - install_protoc:
          platform: << parameters.platform >>
      - install_rust:
          platform: << parameters.platform >>
      - install_extra_tools
      - fetch_dependencies
      - save_cache:
          key: "<< pipeline.parameters.toolchain_version >>"
          paths:
            - ~/.deb
            - ~/.cargo
            - ~/.rustup
            - ~/.local
      - install_xtask

  # Even though all executors use bash there are a number of differences that can be taken care of up front.
  # Windows shell commands are found on the path before the linux subsystem commands, so use aliases to override.
  # OSX doesn't seem to support aliases properly, so we use a symlink
  unify_environment:
    parameters:
      platform:
        type: executor
    steps:
      - run:
          name: Setup path
          command: echo 'export PATH="$HOME/.local/bin:$HOME/.local/aliases:$PATH"' >> "$BASH_ENV"
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *amd_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Write arch
                command: |
                  echo 'amd_linux' >> ~/.arch
      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
              - equal: [ *macos_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Make link to md5
                command: |
                  mkdir -p ~/.local/aliases
                  ln -s /sbin/md5 ~/.local/aliases/md5sum
            - run:
                name: Write arch
                command: |
                  echo 'osx' >> ~/.arch

  # Create files that are useful for cache keys
  create_cache_keys:
    steps:
      - run:
          name: Create cache keys
          command: |
            # The Rust index takes time to download. Update this daily.
            date +%j > ~/.daily_version
            # The checksum of the xtask/src directory, so that when we make changes to xtask we cause a full rebuild
            find xtask/src -type f | while read name; do md5sum $name; done | sort -k 2 | md5sum > ~/.xtask_version
            # The closest common ancestor to the default branch, so that test jobs can take advantage previous compiles
            git remote set-head origin -a
            TARGET_BRANCH=$(git rev-parse --abbrev-ref origin/HEAD)
            echo "Target branch is ${TARGET_BRANCH}"
            COMMON_ANCESTOR_REF=$(git merge-base HEAD "${TARGET_BRANCH}")
            echo "Common ancestor is ${COMMON_ANCESTOR_REF}"
            echo "${CIRCLE_PROJECT_REPONAME}-${COMMON_ANCESTOR_REF}" > ~/.merge_version

  # Linux specific step to install packages that are needed
  install_packages:
    parameters:
      platform:
        type: executor
    steps:
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *amd_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Update and install dependencies
                command: |
                  if [[ ! -d "$HOME/.deb" ]]; then
                    mkdir $HOME/.deb
                    sudo apt-get --download-only -o Dir::Cache="$HOME/.deb" -o Dir::Cache::archives="$HOME/.deb" install libssl-dev libdw-dev cmake
                  fi
                  sudo dpkg -i $HOME/.deb/*.deb
      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
              - equal: [ *macos_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install CMake
                command: |
                  brew install cmake
  install_protoc:
    parameters:
      platform:
        type: executor
    steps:
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ *amd_linux_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install protoc
                command: |
                  if [[ ! -f "$HOME/.local/bin/protoc" ]]; then
                    curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-linux-x86_64.zip --output protoc.zip
                    unzip protoc.zip -d $HOME/.local
                  fi
      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
              - equal: [ *macos_test_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install protoc
                command: |
                  if [[ ! -f "$HOME/.local/bin/protoc" ]]; then
                    curl -L https://github.com/protocolbuffers/protobuf/releases/download/v<< pipeline.parameters.protoc_version >>/protoc-<< pipeline.parameters.protoc_version >>-osx-universal_binary.zip --output protoc.zip
                    unzip protoc.zip -d $HOME/.local
                  fi

  install_rust:
    parameters:
      platform:
        type: executor
    steps:
      - run:
          name: Install Rust
          command: |
            if [[ ! -d "$HOME/.cargo" ]]; then
              curl https://sh.rustup.rs -sSf -o rustup.sh
              chmod 755 ./rustup.sh
              ./rustup.sh -y --profile minimal --component clippy --component rustfmt --default-toolchain none
              $HOME/.cargo/bin/rustc -V
            fi
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"

      - when:
          condition:
            or:
              - equal: [ *macos_build_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Special case for OSX x86_64 builds
                command: |
                  rustup target add x86_64-apple-darwin

  install_extra_tools:
    steps:
      - run:
          name: Install cargo deny, about, edit
          command: |
            if [[ ! -f "$HOME/.cargo/bin/cargo-deny$EXECUTABLE_SUFFIX" ]]; then
              cargo install --locked --version 0.14.21 cargo-deny
              cargo install --locked --version 0.6.1 cargo-about
              cargo install --locked --version 0.12.2 cargo-edit
              cargo install --locked --version 0.12.0 cargo-fuzz
            fi

            if [[ ! -f "$HOME/.cargo/bin/cargo-nextest$EXECUTABLE_SUFFIX" ]]; then
              cargo install --locked --version 0.9.70 cargo-nextest
            fi

  fetch_dependencies:
    steps:
      - run:
          name: Fetch dependencies
          command: cargo fetch --locked
  install_xtask:
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.xtask_version >>"
      - run:
          name: Install xtask
          command: |
            if [[ ! -f "$HOME/.cargo/bin/xtask$EXECUTABLE_SUFFIX" ]]; then
              cargo install --locked --path xtask
            fi
      - save_cache:
          key: "<< pipeline.parameters.xtask_version >>"
          paths:
            - ~/.cargo/bin/xtask
            - ~/.cargo/bin/xtask.exe

  xtask_lint:
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.merge_version >>-lint"
      - run: xtask lint
      - when:
          condition:
            equal: [ "dev", "<< pipeline.git.branch >>" ]
          steps:
            - save_cache:
                key: "<< pipeline.parameters.merge_version >>-lint"
                paths:
                  - target
  xtask_release_preverify:
    steps:
      - run: xtask release pre-verify

  xtask_check_compliance:
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.merge_version >>-compliance"
      # cargo-deny fetches a rustsec advisory DB, which has to happen on github.com over https
      - run: git config --global --unset-all url.ssh://git@github.com.insteadof
      - run: xtask check-compliance
      - when:
          condition:
            equal: [ "dev", "<< pipeline.git.branch >>" ]
          steps:
            - save_cache:
                key: "<< pipeline.parameters.merge_version >>-compliance"
                paths:
                  - target
  xtask_test:
    parameters:
      variant:
        type: string
        default: "default"
    steps:
      - restore_cache:
          keys:
            - "<< pipeline.parameters.merge_version >>-test-<< parameters.variant >>"
      - run:
          name: Run tests
          environment:
            # Use the settings from the "ci" profile in nextest configuration.
            NEXTEST_PROFILE: ci
            # Temporary disable lib backtrace since it crashing on MacOS
            # TODO: remove this workaround once we update to Xcode >= 15.1.0
            # See: https://github.com/apollographql/router/pull/5462
            RUST_LIB_BACKTRACE: 0
          command: xtask test --workspace --locked --features ci
      - run:
          name: Delete large files from cache
          command: |
            find target/debug/deps -type f -size +50M -delete
            rm target/debug/router*
      - when:
          condition:
            equal: [ "dev", "<< pipeline.git.branch >>" ]
          steps:
            - save_cache:
                key: "<< pipeline.parameters.merge_version >>-test-<< parameters.variant >>"
                paths:
                  - target
      - store_test_results:
          # The results from nextest that power the CircleCI Insights.
          path: ./target/nextest/ci/junit.xml
  fuzz_build:
    steps:
      - run: cargo +nightly-2024-09-22 fuzz build

jobs:
  lint:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_lint

  check_compliance:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_check_compliance

  test:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
      fuzz:
        type: boolean
        default: false
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_test
      - when:
          condition:
            and:
              - equal: [ true, << parameters.fuzz >> ]
          steps:
            - fuzz_build

  pre_verify_release:
    environment:
      <<: *common_job_environment
    parameters:
      platform:
        type: executor
    executor: << parameters.platform >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - xtask_release_preverify

  build_release:
    parameters:
      platform:
        type: executor
      nightly:
        type: boolean
        default: false
    executor: << parameters.platform >>
    environment:
      <<: *common_job_environment
      RELEASE_BIN: router
      REPO_URL: << pipeline.project.git_url >>
    steps:
      - checkout
      - setup_environment:
          platform: << parameters.platform >>
      - when:
          condition:
            or:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
          steps:
            # This will set the version to include current date and commit hash
            - when:
                condition:
                  equal: [ true, << parameters.nightly >> ]
                steps:
                  - run: cargo xtask release prepare nightly
            - run:
                command: >
                  cargo xtask dist
            - run:
                command: >
                  mkdir -p artifacts
            - run:
                command: >
                  cargo xtask package --output artifacts/
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*"
      - store_artifacts:
          path: artifacts/
      - when:
          condition:
            and:
              - equal: [ *amd_linux_build_executor, << parameters.platform >> ]
              - equal: [ true, << parameters.nightly >> ]
              - matches:
                  pattern: "^https:\\/\\/github\\.com\\/scoremedia\\/router.*$"
                  value: << pipeline.project.git_url >>
          steps:
            - setup_remote_docker:
                # CircleCI Image Policy
                #   https://circleci.com/docs/remote-docker-images-support-policy/
                version: docker23
                docker_layer_caching: true
            - run:
                name: Docker build
                command: |
                  # Source of the new image will be ser to the repo URL.
                  # This will have the effect of setting org.opencontainers.image.source and org.opencontainers.image.author to the originating pipeline
                  # Therefore the docker image will have the same permissions as the originating project.
                  # See: https://docs.github.com/en/packages/learn-github-packages/connecting-a-repository-to-a-package#connecting-a-repository-to-a-container-image-using-the-command-line

                  BASE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq --raw-output '.packages[0].version')
                  ARTIFACT_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/0/artifacts/router-v${BASE_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
                  VERSION="v$(echo "${BASE_VERSION}" | tr "+" "-")"
                  ROUTER_TAG=thescore.jfrog.io/docker-prod/apollo-router-nightly

                  echo "REPO_URL: ${REPO_URL}"
                  echo "BASE_VERSION: ${BASE_VERSION}"
                  echo "ARTIFACT_URL: ${ARTIFACT_URL}"
                  echo "VERSION: ${VERSION}"
                  echo "ROUTER_TAG: ${ROUTER_TAG}"

                  # Create a multi-arch builder which works properly under qemu
                  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                  docker context create buildx-build
                  docker buildx create --driver docker-container --use buildx-build
                  docker buildx inspect --bootstrap

                  echo ${JFROG_ACCESS_TOKEN} | docker login thescore.jfrog.io -u ${JFROG_USERNAME} --password-stdin
                  # TODO: Can't figure out how to build multi-arch image from ARTIFACT_URL right now. Figure out later...
                  # Build and push debug image
                  docker buildx build --load --platform linux/amd64 --build-arg CIRCLE_TOKEN="${CIRCLE_TOKEN}" --build-arg REPO_URL="${REPO_URL}" --build-arg ARTIFACT_URL="${ARTIFACT_URL}" --build-arg DEBUG_IMAGE="true" --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION}-debug .
                  docker push ${ROUTER_TAG}:${VERSION}-debug
                  # Build and push release image
                  docker buildx build --load --platform linux/amd64 --build-arg CIRCLE_TOKEN="${CIRCLE_TOKEN}" --build-arg REPO_URL="${REPO_URL}" --build-arg ARTIFACT_URL="${ARTIFACT_URL}" --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION} .
                  docker push ${ROUTER_TAG}:${VERSION}
                  # save containers for analysis
                  mkdir built-containers
                  docker save -o built-containers/router_${VERSION}-debug.tar ${ROUTER_TAG}:${VERSION}-debug
                  docker save -o built-containers/router_${VERSION}.tar ${ROUTER_TAG}:${VERSION}

            - persist_to_workspace:
                root: .
                paths:
                  - "built-containers/*.tar"

  publish_docker_release:
    docker:
      - image: cimg/base:stable
    resource_class: small
    environment:
      <<: *common_job_environment
      VERSION: << pipeline.git.tag >>
    steps:
      - when:
          condition:
            not:
              equal: [ "https://github.com/scoremedia/router", << pipeline.project.git_url >> ]
          steps:
            - run:
                command: >
                  echo "Not publishing any docker release."
      - when:
          condition:
            equal: [ "https://github.com/scoremedia/router", << pipeline.project.git_url >> ]
          steps:
            - checkout
            - setup_remote_docker:
                # CircleCI Image Policy
                #   https://circleci.com/docs/remote-docker-images-support-policy/
                version: 20.10.24
                docker_layer_caching: true
            - attach_workspace:
                at: artifacts
            - run:
                command: >
                  cd artifacts && sha256sum *.tar.gz > sha256sums.txt
            - run:
                command: >
                  cd artifacts && md5sum *.tar.gz > md5sums.txt
            - run:
                command: >
                  cd artifacts && sha1sum *.tar.gz > sha1sums.txt
            - run:
                name: Docker build
                command: |
                  ROUTER_TAG=thescore.jfrog.io/docker-prod/apollo-router
                  # Create a multi-arch builder which works properly under qemu
                  docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                  docker context create buildx-build
                  docker buildx create --driver docker-container --use buildx-build
                  docker buildx inspect --bootstrap

                  echo ${JFROG_ACCESS_TOKEN} | docker login thescore.jfrog.io -u ${JFROG_USERNAME} --password-stdin
                  # To prevent overwrite, check to see if our images already exists
                  # If the manifest command succeeds, the images already exist
                  docker manifest inspect ${ROUTER_TAG}:${VERSION}  > /dev/null && exit 1
                  docker manifest inspect ${ROUTER_TAG}:${VERSION}-debug  > /dev/null && exit 1
                  # Build and push debug image
                  docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg DEBUG_IMAGE="true" --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION}-debug .
                  # Build and push release image
                  docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg ROUTER_RELEASE=${VERSION} -f dockerfiles/Dockerfile.router -t ${ROUTER_TAG}:${VERSION} .

workflows:
  ci_checks:
    when:
      not:
        or:
          - << pipeline.parameters.nightly >>
          - << pipeline.parameters.quick_nightly >>
    jobs:
      - lint:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
      - check_compliance:
          matrix:
            parameters:
              platform: [ amd_linux_build ]

      - test:
          # this should be changed back to true on dev after release
          fuzz: false
          requires:
            - lint
            - check_compliance
          matrix:
            parameters:
              platform:
                [ macos_test, amd_linux_test ]

  quick-nightly:
    when: << pipeline.parameters.quick_nightly >>
    jobs:
      - build_release:
          nightly: true
          context:
            - router
            - orb-publishing
          matrix:
            parameters:
              platform:
                [ macos_build, amd_linux_build ]
  nightly:
    when: << pipeline.parameters.nightly >>
    jobs:
      - lint:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
      - check_compliance:
          matrix:
            parameters:
              platform: [ amd_linux_build ]

      - test:
          requires:
            - lint
            - check_compliance
          matrix:
            parameters:
              platform:
                [ macos_test, amd_linux_test ]
      - build_release:
          requires:
            - test
          nightly: true
          context:
            - router
            - orb-publishing
          matrix:
            parameters:
              platform:
                [ macos_build, amd_linux_build ]
      - secops/wiz-docker:
          context:
            - platform-docker-ro
            - wiz
            - github-orb
          requires:
            - build_release
          container-dir: /tmp/workspace/built-containers
          # Disables all PR comments from this job
          do-pr-comments: false
          # Scan job will return 1 if findings violating the Wiz policy are found.
          # Toggle off to prevent any CI failures OR
          # contact Apollo's Security team to adjust what violates the
          # Wiz policy used in this scan.
          fail-on-findings: true
          # Configure scan job to use a policy specific to apollo-router.
          # This allows us to tailor the policy applied during the scans to router.
          wiz-policies: Apollo-Router-Vulnerabilities-Policy


  release:
    when:
      not:
        or:
          - << pipeline.parameters.nightly >>
          - << pipeline.parameters.quick_nightly >>
    jobs:
      - pre_verify_release:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - lint:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - check_compliance:
          matrix:
            parameters:
              platform: [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - test:
          matrix:
            parameters:
              platform:
                [ macos_test, amd_linux_test ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - build_release:
          matrix:
            parameters:
              platform:
                [ amd_linux_build ]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
      - publish_docker_release:
          requires:
            - build_release
            - lint
            - check_compliance
            - pre_verify_release
            - test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v.*/
          context:
            - Artifactory-Credentials

  security-scans:
    when:
      not:
        or:
          - << pipeline.parameters.nightly >>
          - << pipeline.parameters.quick_nightly >>
    jobs:
      - secops/gitleaks:
          context:
            - secops-oidc
            - github-orb
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
          git-revision: << pipeline.git.revision >>
      - secops/semgrep:
          context:
            - secops-oidc
            - github-orb
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
